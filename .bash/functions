#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

function getcert() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
#		local certText=$(echo "${tmp}" \
#			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
#			no_serial, no_sigdump, no_signame, no_validity, no_version");


		local certText=$(echo "${tmp}" \
			| openssl x509 -noout -text -certopt "no_aux, no_header, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_version");

		echo "Common Name:";
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;

		echo "";
		echo "Validity : "
		echo "${certText}" | grep -A 2 "Validity" | sed -e 's/^[ \t]*//' | tail -n 2	

		# echo "";
		# echo "${certText}"

		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function server() {
	local port="${1:-8000}";
	open "http://localhost:${port}" &
	python -m http.server $port

}

function ssh-tunnel-master () {
	local ssh_server=$1
	# check to see if ssh control master is running, if not start it.
	if ssh -O check $ssh_server >/dev/null 2>&1; then
		echo "Master $ssh_server is already running"
	else
		echo "Master $ssh_server is not running, starting it now"
		ssh -f -N $ssh_server
	fi
}

function ssh-close-tunnels () {
	FILES=/Users/brad/tmp/.ssh/cm/*
	for f in $FILES
	do
	echo "Processing $f file..."
	# take action on each file. $f store current file name
	# cat $f
	done
}




